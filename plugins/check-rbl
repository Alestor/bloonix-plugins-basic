#!/usr/bin/perl

=head1 NAME

check-rbl - Plugin to check IP or hostnames on RBL.

=head1 SYNOPSIS

    check-rbl [ OPTIONS ]

    check-rbl --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2015 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $config_file = "/etc/bloonix/agent/check-rbl.conf";
my $plugin = Bloonix::Plugin->new();

$plugin->version("0.1");

$plugin->example(
    description => [
        "Check a host or IP address if its listet on a blacklist.",
        "",
        "Configure the blacklist in /etc/bloonix/agent/check-rbl.conf on your server."
    ],
    arguments => [
        host => "mail.bloonix.de",
        timeout => 3
    ]
);

$plugin->has_host(
    mandatory => 1,
    description => "The SMTP server to check."
);

$plugin->has_timeout(
    default => 3,
    description => "A timeout in seconds after a request to a blacklist will be aborted."
);

$plugin->add_option(
    name => "Warning threshold",
    option => "warning",
    value => "count",
    value_type => "int",
    default => 0,
    description => "The the number of blacklisting servers to trigger a CRITICAL status."
);

$plugin->add_option(
    name => "Critical threshold",
    option => "critical",
    value => "count",
    value_type => "int",
    default => 1,
    description => "The the number of blacklisting servers to trigger a WARNING status."
);

$plugin->has_debug;

my $opt = $plugin->parse_options;

# --------------------------------------------------
# Check blacklist servers
# --------------------------------------------------

my $ip = $plugin->get_ip_by_hostname(ipv4 => $opt->{host});
my $reverse_ip = join(".", reverse split /\./, $ip);

open my $fh, "<", $config_file or $plugin->exit(
    status => "UNKNOWN",
    message => "unable to open file $config_file - $!"
);

my $checked = 0;
my (@timeout, @listed);
my @servers = <$fh>;
chomp @servers;

foreach my $server (@servers) {
    if ($opt->{debug}) {
        print STDERR "check $reverse_ip.$server";
    }

    eval {
        $SIG{__DIE__} = sub { alarm(0) };
        $SIG{ALRM} = sub { die "timeout" };
        alarm($opt->{timeout});
        my ($name, $aliases, $addrtype, $length, @addrs) = gethostbyname($reverse_ip .".". $server);
        if ($name) {
            my @addr = unpack("C4", $addrs[0]);
            push @listed, "$server($addr[3])";
            if ($opt->{debug}) {
                print STDERR " (listed)\n";
            }
        } elsif ($opt->{debug}) {
            print STDERR " (not listed)\n";
        }
        alarm(0);
    };

    my $err = $@;

    if ($err) {
        if ($opt->{debug}) {
            print STDERR " (timed out)\n";
        } elsif ($err !~ /^timeout/) {
            print STDERR $@;
        }
        push @timeout, $server;
    } else {
        $checked++;
    }
}

# --------------------------------------------------
# Check the status
# --------------------------------------------------

my $host = $opt->{host} =~ /^\d+\.\d+\.\d+\.\d+\z/
    ? $opt->{host}
    : "$opt->{host}($ip)";

my $status = "OK";
my $message;

if (@listed) {
    $message = join(" ", "$host is listed on", scalar @listed, "servers");
    $message .= " [". join(", ", @listed) ."]";
} else {
    $message = "$host is not listed";
}

if (@timeout) {
    $message .= " [timed out: ". join(", ", @timeout) ."]";
}

if ($opt->{critical} && @listed >= $opt->{critical}) {
    $status = "CRITICAL";
} elsif ($opt->{warning} && @listed >= $opt->{warning}) {
    $status = "WARNING";
}

$plugin->exit(
    status => $status,
    message => $message
);
