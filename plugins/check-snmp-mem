#!/usr/bin/perl

=head1 NAME

check-snmp-mem - Plugin to check the memory usage over snmp.

=head1 SYNOPSIS

    check-snmp-mem [ OPTIONS ]

    check-snmp-mem --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.3");

$plugin->example(
    description => "A simple example to check the memory usage and trigger a warning if the usage is higher than 90% or trigger a critical if the usage is higher than 95%:",
    arguments => [
        warning => "memusedper:ge:90",
        critical => "memusedper:ge:95"
    ]
);

$plugin->has_snmp;
$plugin->has_debug;

$plugin->has_threshold(
    keys => [
        { key => "memtotal", unit => "bytes" },
        { key => "memfree", unit => "bytes" },
        { key => "swaptotal", unit => "bytes" },
        { key => "swapfree", unit => "bytes" },
        { key => "memused", unit => "bytes" },
        { key => "memusedper", unit => "percent" },
        { key => "swapusedper", unit => "percent" },
        { key => "swapused", unit => "percent" }
    ]
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

# --------------------------------------------------
# SNMP connection
# --------------------------------------------------

my $snmp = $plugin->start_snmp_session;

# --------------------------------------------------
# Load statistics
# --------------------------------------------------

sub get_snmp_table {
    my ($snmp, $oid) = @_;

    my $response = $snmp->get_table($oid);

    if (!defined $response) {
        my $message = "ERROR: ". $snmp->error;
        $snmp->close;
        $plugin->exit(
            status => "UNKNOWN",
            message => $message
        );
    }

    return $response;
}

my $oid_desc  = "1.3.6.1.2.1.25.2.3.1.3";
my $oid_unit  = "1.3.6.1.2.1.25.2.3.1.4";
my $oid_total = "1.3.6.1.2.1.25.2.3.1.5";
my $oid_used  = "1.3.6.1.2.1.25.2.3.1.6";

my $mem_desc  = &get_snmp_table($snmp, $oid_desc);
my $mem_unit  = &get_snmp_table($snmp, $oid_unit);
my $mem_total = &get_snmp_table($snmp, $oid_total);
my $mem_used  = &get_snmp_table($snmp, $oid_used);

$snmp->close;

my $stat = {};
my $mem = {};
my $search = {
    phy => qr/(?:Physical\s+Memory|Real\s+Memory)/i,
    swap => qr/Swap\s+Space/i,
    virt => qr/Virtual\s+Memory/i,
    buff => qr/Memory\s+buffers/i,
    cache => qr/Cached\s+Memory/i
};

# Windows example:
#
# oid_desc: 
#   1.3.6.1.2.1.25.2.3.1.3.1: A:\
#   1.3.6.1.2.1.25.2.3.1.3.2: "C:\\ Label:  Serial Number 8423b358"
#   1.3.6.1.2.1.25.2.3.1.3.3: D:\
#   1.3.6.1.2.1.25.2.3.1.3.4: Virtual Memory
#   1.3.6.1.2.1.25.2.3.1.3.5: Physical Memory
# oid_total: 
#   1.3.6.1.2.1.25.2.3.1.5.1: 0
#   1.3.6.1.2.1.25.2.3.1.5.2: 4168191
#   1.3.6.1.2.1.25.2.3.1.5.3: 0
#   1.3.6.1.2.1.25.2.3.1.5.4: 32760
#   1.3.6.1.2.1.25.2.3.1.5.5: 16376
# oid_unit: 
#   1.3.6.1.2.1.25.2.3.1.4.1: 0
#   1.3.6.1.2.1.25.2.3.1.4.2: 4096
#   1.3.6.1.2.1.25.2.3.1.4.3: 0
#   1.3.6.1.2.1.25.2.3.1.4.4: 65536
#   1.3.6.1.2.1.25.2.3.1.4.5: 65536
# oid_used: 
#   1.3.6.1.2.1.25.2.3.1.6.1: 0
#   1.3.6.1.2.1.25.2.3.1.6.2: 2174784
#   1.3.6.1.2.1.25.2.3.1.6.3: 0
#   1.3.6.1.2.1.25.2.3.1.6.4: 6304
#   1.3.6.1.2.1.25.2.3.1.6.5: 4083

# Linux example:
#
# 1.3.6.1.2.1.25.2.3.1.3.3: Virtual memory
# 1.3.6.1.2.1.25.2.3.1.3.10: Swap space
# 1.3.6.1.2.1.25.2.3.1.3.8: Shared memory
# 1.3.6.1.2.1.25.2.3.1.3.6: Memory buffers
# 1.3.6.1.2.1.25.2.3.1.3.1: Physical memory
# 1.3.6.1.2.1.25.2.3.1.3.33: /boot
# 1.3.6.1.2.1.25.2.3.1.3.32: /
# 1.3.6.1.2.1.25.2.3.1.3.7: Cached memory
# 1.3.6.1.2.1.25.2.3.1.3.31: /dev

foreach my $oid (keys %$mem_desc) {
    my ($id) = $oid =~ /(\d+)$/;

    if ($opt->{debug}) {
        print STDERR ">> $oid: $mem_desc->{$oid}\n";
    }

    foreach my $key (keys %$search) {
        if ($mem_desc->{$oid} =~ $search->{$key}) {
            $mem->{"${key}_unit"} = join(".", $oid_unit, $id);
            $mem->{"${key}_total"} = join(".", $oid_total, $id);
            $mem->{"${key}_used"} = join(".", $oid_used, $id);
        }
    }
}

if ($mem->{swap_unit}) {
    $mem->{virt_unit}  = $mem->{swap_unit};
    $mem->{virt_total} = $mem->{swap_total};
    $mem->{virt_used}  = $mem->{swap_used};
}

# memory
$stat->{memtotal} = $mem_total->{$mem->{phy_total}} * $mem_unit->{$mem->{phy_unit}};
$stat->{memused} = $mem_used->{$mem->{phy_used}} * $mem_unit->{$mem->{phy_unit}};

if ($mem->{buff_unit}) {
    $stat->{buffers} = $mem_used->{$mem->{buff_used}} * $mem_unit->{$mem->{buff_unit}};
    $stat->{cached} = $mem_used->{$mem->{cache_used}} * $mem_unit->{$mem->{cache_unit}};
    $stat->{memused} -= $stat->{buffers};
    $stat->{memused} -= $stat->{cached};
} else {
    $stat->{buffers} = 0;
    $stat->{cached} = 0;
}

$stat->{memfree} = $stat->{memtotal} - $stat->{memused};
$stat->{memusedper} = sprintf("%.2f", 100 * $stat->{memused} / $stat->{memtotal});

# swap
$stat->{swaptotal} = $mem_total->{$mem->{virt_total}} * $mem_unit->{$mem->{virt_unit}};
$stat->{swapused} = $mem_used->{$mem->{virt_used}} * $mem_unit->{$mem->{virt_unit}};
$stat->{swapfree} = $stat->{swaptotal} - $stat->{swapused};
$stat->{swapusedper} = sprintf("%.2f", 100 * $stat->{swapused} / $stat->{swaptotal});

# --------------------------------------------------
# Check warning and critical
# --------------------------------------------------

my $result = $plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(memusedper swapusedper)]
);

$plugin->exit(
    status => $result->{status},
    message => $result->{upshot},
    stats => $stat
);
