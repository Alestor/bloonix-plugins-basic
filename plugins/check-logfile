#!/usr/bin/perl

=head1 NAME

check-logfile - Plugin to check file sums.

=head1 SYNOPSIS

    check-logfile [ OPTIONS ]

    check-logfile --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.11");

$plugin->example(
    description => [
        "NOTE: please create the configuration file '/etc/bloonix/agent/check-logfile.conf' on your server and write all logfiles into the file (one logfile per line) that the Bloonix agent is allowed to read!",
        "",
        "In this example the logfile /var/log/auth.log is checked for failed login attempts and a critical event is triggered if 3 entries were found. In addition the nightly rotated file (/var/log/auth.log.1) is checked also."
    ],
    arguments => [
        logfile => "/var/log/auth.log",
        critical => "Did not receive identification string from",
        critical => "Failed password for .+ from .+ ssh",
        critical => "User .+ from .+ not allowed because not listed in AllowUsers",
        critical => "Invalid user .+ from .+",
        "warn-count" => 1,
        "crit-count" => 2,
        "rotated-file" => undef
    ]
);

$plugin->add_option(
    name => "Search for warnings",
    option => "warning",
    value => "regex",
    multiple => 1,
    value_type => "string",
    description => "Define a regular expression to search for it in the logfile. The warn-counter will be increased with each match."
);

$plugin->add_option(
    name => "Trigger a warning after X matches",
    option => "warn-count",
    value => "count",
    value_type => "string",
    default => 1,
    regex => qr/^\d+\z/,
    description => "Set the maximum number of matches that are allowed. If more matches are found then a WARNING is triggered."
);

$plugin->add_option(
    name => "Search for critical events",
    option => "critical",
    value => "regex",
    multiple => 1,
    value_type => "string",
    description => "Define a regular expression to search for it in the logfile. The crit-counter will be increased with each match."
);

$plugin->add_option(
    name => "Trigger a critical after X matches",
    option => "crit-count",
    value => "count",
    value_type => "string",
    default => 1,
    regex => qr/^\d+\z/,
    description => "Set the maximum number of matches that are allowed. If more matches are found then a CRITICAL is triggered."
);

$plugin->add_option(
    name => "Logfile",
    option => "logfile",
    value => "filename",
    value_type => "string",
    mandatory => 1,
    description => "This is the logfile to search for events."
);

$plugin->add_option(
    name => "Include rotated log files",
    option => "rotated-file",
    description => "Enable this option if the check should automatically search rotated log files in the format 'logfile.1'."
);

$plugin->one_must_have_options("warning", "critical");

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;
my %allowed_logfiles;

if (open my $fh, "<", "/etc/bloonix/agent/check-logfile.conf") {
    while (my $line = <$fh>) {
        $line =~ s/[\r\n]+\z//;
        $line =~ s/^\s+//;
        $line =~ s/\s+\z//;
        $allowed_logfiles{$line} = 1;
    }
} else {
    $plugin->exit(
        status => "UNKNOWN",
        message => "unable to open /etc/bloonix/agent/check-logfile.conf for reading - $!"
    );
}

if (!exists $allowed_logfiles{ $opt->{logfile} }) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "the agent has no permission to check the logfile"
    );
}

if (!-e $opt->{logfile}) {
    if ($opt->{rotated_file} && -e "$opt->{logfile}.1") {
        $opt->{logfile} = "$opt->{logfile}.1";
    }

    $plugin->exit(
        status => "WARNING",
        message => "the logfile currently does not exists",
        stats => { warning => 0, critical => 0 }
    );
}

# --------------------------------------------------
# Load last byte position
# --------------------------------------------------

my $bytepos = 0;
my $filesize = (stat($opt->{logfile}))[7];
my @logfiles = ();
my $data = $plugin->load_json;

if ($data && defined $data->{bytepos} && $data->{bytepos} =~ /^\d+\z/) {
    $bytepos = $data->{bytepos};
}

if ($bytepos > $filesize) {
    # If the bytepos is higher than the filesize, then it's possilbe
    # that a new logfile was created and the old one was moved to logfile.1.

    if (-e "$opt->{logfile}.1") {
        my $old_log_size = (stat("$opt->{logfile}.1"))[7];

        if ($bytepos < $old_log_size) {
            push @logfiles, {
                bytepos => $bytepos,
                logfile => "$opt->{logfile}.1",
            };
        }
    }

    $bytepos = 0;
}

if ($bytepos < $filesize) {
    push @logfiles, {
        bytepos => $bytepos,
        logfile => $opt->{logfile},
    };
}

# --------------------------------------------------
# Check logfile
# --------------------------------------------------

my $status  = "OK";
my $w_match = 0;
my $c_match = 0;

foreach my $log (@logfiles) {
    #print "parse $log->{logfile}\n";

    open my $fh, "<", $log->{logfile} or do {
        $plugin->exit(
            status => "UNKNOWN",
            message => "unable to open logfile '$log->{logfile}'"
        );
    };

    if ($log->{bytepos} > 0) {
        seek($fh, $log->{bytepos}, 0);
    }

    LINE:
    while (my $line = <$fh>) {
        foreach my $c (@{$opt->{critical}}) {
            if ($line =~ /$c/) {
                $c_match++;
                next LINE;
            }
        }

        foreach my $w (@{$opt->{warning}}) {
            if ($line =~ /$w/) {
                $w_match++;
                next LINE;
            }
        }
    }

    $bytepos = tell $fh;
    close $fh;
}

if ($c_match >= $opt->{crit_count}) {
    $status = "CRITICAL";
} elsif ($w_match >= $opt->{warn_count}) {
    $status = "WARNING";
}

$plugin->safe_json({ bytepos => $bytepos });

my $logfiles = join("/", map { $_->{logfile} } @logfiles) || $opt->{logfile};
my $message = "$logfiles ($w_match ";
$message .= $w_match > 1 ? "warnings" : "warning";
$message .= ", $c_match ";
$message .= $c_match > 1 ? "criticals" : "critical";
$message .= ")";

$plugin->exit(
    status => $status,
    message => $message,
    stats => {
        warning => $w_match,
        critical => $c_match
    }
);
