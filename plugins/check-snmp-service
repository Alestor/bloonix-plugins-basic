#!/usr/bin/perl

=head1 NAME

check-snmp-service - Plugin to check a service over snmp.

=head1 SYNOPSIS

    check-snmp-service [ OPTIONS ]

    check-snmp-service --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.4");

$plugin->example(
    description => "Example to check if the service 'My Service' is alive:",
    arguments => [
        host => "127.0.0.1",
        port => 161,
        community => "public",
        service => "My Service"
    ]
);

$plugin->has_snmp;
$plugin->has_debug;

$plugin->add_option(
    name => "Service name to check",
    option => "service",
    value => "string",
    value_type => "string",
    mandatory => 1,
    multiple => 1,
    description => "This is the service name to check."
);

$plugin->add_option(
    name => "Match the service name as regex",
    option => "match",
    description => "Use the service name as a regex."
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

my %srv_state = (
    1 => "active",
    2 => "continue-pending",
    3 => "pause-pending",
    4 => "paused",
);

my $oid_srv_name  = "1.3.6.1.4.1.77.1.2.3.1.1";
my $oid_srv_state = "1.3.6.1.4.1.77.1.2.3.1.3";

# --------------------------------------------------
# SNMP connection
# --------------------------------------------------

my $snmp = $plugin->start_snmp_session;
$snmp->max_msg_size(65535);

# --------------------------------------------------
# Load service table
# --------------------------------------------------

sub get_snmp_table {
    my ($snmp, $oid) = @_;

    my $response = $snmp->get_table($oid);

    if (!defined $response) {
        my $message = "ERROR: ". $snmp->error;
        $snmp->close;
        $plugin->exit(
            status => "CRITICAL",
            message => $message
        );
    }

    return $response;
}

my $resp_srv_name  = &get_snmp_table($snmp, $oid_srv_name);
my $resp_srv_state = &get_snmp_table($snmp, $oid_srv_state);
my %services = map { $_ => "not found" } @{$opt->{service}};

foreach my $oid (keys %$resp_srv_name) {
    my $service_name = $resp_srv_name->{$oid};

    if ($opt->{debug}) {
        print STDERR ">> found service $oid -> $service_name\n";
    }

    foreach my $service (@{$opt->{service}}) {
        if (($opt->{match} && $service_name =~ /$service/) || (!$opt->{match} && $service_name eq $service)) {
            my $srv_oid = $oid;
            $srv_oid =~ s/^$oid_srv_name//;
            my $state_oid = "$oid_srv_state$srv_oid";

            if (!exists $resp_srv_state->{$state_oid}) {
                $services{$service} = 0;
            } else {
                $services{$service} = $srv_state{ $resp_srv_state->{$state_oid} };
            }
        }
    }
}

# --------------------------------------------------
# Check warning and critical
# --------------------------------------------------

my $status  = "OK";
my @message = ();

foreach my $service (sort keys %services) {
    push @message, "$service ($services{$service})";

    if ($services{$service} ne "active") {
        $status = "CRITICAL";
    }
}

$plugin->exit(
    status => $status,
    message => join(", ", @message)
);
