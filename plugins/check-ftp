#!/usr/bin/perl

=head1 NAME

check-ftp - Plugin to check ports.

=head1 SYNOPSIS

    check-ftp [ OPTIONS ]

    check-ftp --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new();

$plugin->version("0.2");

$plugin->example(
    description => "A simple FTP login check",
    arguments => [
        host => "www.bloonix.de",
        warning => 3,
        critical => 5,
        username => "bloonix",
        password => "secret"
    ]
);

$plugin->has_warning(default => 3);
$plugin->has_critical(default => 5);
$plugin->has_timeout(default => 10);
$plugin->has_host(mandatory => 1);
$plugin->has_login_username;
$plugin->has_login_password;
$plugin->has_use_ssl;

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;
my $mod;

if ($opt->{use_ssl}) {
    require Net::FTPSSL;
    $mod = "Net::FTPSSL";
} else {
    require Net::FTP;
    $mod = "Net::FTP";
}

# --------------------------------------------------
# Port check
# --------------------------------------------------

my $response = "";
my $timeout  = ();

# Time measurement
$plugin->runtime;

eval {
    local $SIG{__DIE__} = sub { alarm(0) };
    local $SIG{ALRM} = sub { die "timeout" };
    alarm($opt->{timeout});

    my $ftp = $mod->new($opt->{host})
        or die "connect";

    if ($opt->{username} && $opt->{password}) {
        $ftp->login($opt->{username}, $opt->{password})
            or die "login";
    }

    $ftp->quit;
    alarm(0);
};

my $err = $@;
my $time = $plugin->runtime;

# --------------------------------------------------
# Check warning and critical
# --------------------------------------------------

if ($err) {
    if ($err =~ /^timeout/) {
        $plugin->exit(
            status => "CRITICAL",
            message => "ftp check timed out after $time seconds",
            tags => "timeout"
        );
    }
    if ($err =~ /^connect/) {
        $plugin->exit(
            status => "CRITICAL",
            message => "cannot connect to host",
        );
    }
    if ($err =~ /^login/) {
        $plugin->exit(
            status => "CRITICAL",
            message => "cannot login to ftp host"
        );
    }
    $plugin->exit(
        status => "CRITICAL",
        message => "an unexpected error occurs - $err"
    );
}

my $status = "OK";

if ($opt->{critical} && $time >= $opt->{critical}) {
    $status = "CRITICAL";
} elsif ($opt->{warning} && $time >= $opt->{warning}) {
    $status = "WARNING";
}

$plugin->exit(
    status => $status,
    message => "ftp response in ${time}s",
    stats => { time => $time }
);  
